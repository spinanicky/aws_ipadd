#!/usr/local/bin/python3
from boto3.session import Session
from botocore.exceptions import ProfileNotFound,ClientError
import requests
import os
import argparse
import configparser
import sys

parser = argparse.ArgumentParser(description='Add your current public ip into AWS security group')
parser.add_argument('profile_name', help='ipadd profile name')
args = parser.parse_args()

config_file = "{}/.aws_ipadd/aws_ipadd".format(os.environ['HOME'])
config = configparser.ConfigParser()
config.sections()
config.read(config_file)

profile_name = args.profile_name
if not profile_name in config:
    print("Profile_name \"" + profile_name + "\" doesn't exist, please check \"" + config_file + "\" file.")
    sys.exit()

config = config[profile_name]
rule_name = config['rule_name']
start_port = int(config['start_port'])
end_port = int(config['end_port'])
protocol = config['protocol'] or 'tcp'
security_group_id = config['security_group_id']
aws_profile = config['aws_profile']
region_name = config['region_name']

session = Session(profile_name=aws_profile,region_name=region_name)
session = session.client('ec2')

def allow_ip_permission(security_group_id, ip):
    session.authorize_security_group_ingress(
        GroupId=security_group_id,
        IpPermissions=[
            {
                'FromPort': start_port,
                'ToPort': end_port,
                'IpProtocol': protocol,
                'IpRanges': [{'CidrIp': ip, 'Description': rule_name}]
            }])

def revoke_ip_permission(security_group_id, ip):
    session.revoke_security_group_ingress(
        GroupId=security_group_id,
        IpPermissions=[
            {
                'FromPort': start_port,
                'ToPort': end_port,
                'IpProtocol': protocol,
                'IpRanges': [{'CidrIp': ip}]
            }])

def create_rule(security_group_id, public_ip):
    try:
        allow_ip_permission(security_group_id, public_ip)
        print("Successful! Your IP {} and Port {} - {} is whitelisted.".format(public_ip, start_port, end_port))
    except Exception as error:
        error = str(error)
        print(error[error.index(':') + 2:])

public_ip = requests.get('https://checkip.amazonaws.com').text.strip() + '/32'

try:
    security_group = session.describe_security_groups(GroupIds=[security_group_id])
except ClientError as error:
    print(eerror)
    sys.exit()

try:
   security_group_rules = security_group['SecurityGroups'][0]['IpPermissions']
except ClientError as eerror:
    print(error)
    sys.exit()

security_group_rule = [security_group_rule for security_group_rule in security_group_rules if 'FromPort' in security_group_rule and security_group_rule['FromPort'] == start_port and 'ToPort' in security_group_rule and security_group_rule['ToPort'] == end_port]
if len(security_group_rule) == 0:
    create_rule(security_group_id, public_ip)
    sys.exit()

current_public_ip = [ip for ip in security_group_rule[0]['IpRanges'] if ip['CidrIp'] != public_ip]
security_group_rule_name = [sg_rule_name for sg_rule_name in current_public_ip if 'Description' in sg_rule_name and sg_rule_name['Description'] == rule_name]

if len(security_group_rule_name) != 0:
    print("Modifying existing rule...")
    exist_ip = security_group_rule_name[0]['CidrIp']
    try:
        print("Removing old whitelisted IP '{}'.".format(exist_ip))
        revoke_ip_permission(security_group_id, exist_ip)
        print("Whitelisting new IP '{}'.".format(public_ip))
        allow_ip_permission(security_group_id, public_ip)
        print("Rule successfully updated!")
    except Exception as error:
        error = str(error)
        print(error[error.index(':') + 2:])
else:
    create_rule(security_group_id, public_ip)
